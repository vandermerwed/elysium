---
import { type CollectionEntry, getCollection } from "astro:content";
import Projects from "@layouts/Projects.astro";
import ProjectDetails from "@layouts/ProjectDetails.astro";
import { getEnrichedSortedPosts } from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import { slugifyStr } from "@utils/slugify";
import { SITE } from "@config";

export interface Props {
  post: CollectionEntry<"projects">;
}

export async function getStaticPaths() {
  const posts = await getCollection("projects", ({ data }) => !data.draft);

  const postResult = posts.map(post => ({
    params: {
      slug: post.data.slug || slugifyStr(post.data.title)
    },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = await getCollection("projects", ({ data }) => !data.draft);

const sortedPosts = await getEnrichedSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <ProjectDetails post={post} />
  ) : (
    <Projects
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
