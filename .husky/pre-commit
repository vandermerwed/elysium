#!/bin/sh

# Modified or added Markdown files, update the modDatetime when body changes
strip_frontmatter_body() {
  awk 'BEGIN{delims=0} {
    if (delims < 2) {
      if ($0 == "---") {
        delims++
      }
      next
    }
    print
  }'
}

content_changed() {
  status="$1"
  file="$2"

  if [ "$status" = "A" ]; then
    return 0
  fi

  if ! git show HEAD:"$file" >/dev/null 2>&1; then
    return 0
  fi

  tmp_old=$(mktemp)
  tmp_new=$(mktemp)

  git show HEAD:"$file" 2>/dev/null | strip_frontmatter_body > "$tmp_old"
  cat "$file" | strip_frontmatter_body > "$tmp_new"

  if cmp -s "$tmp_old" "$tmp_new"; then
    rm -f "$tmp_old" "$tmp_new"
    return 1
  fi

  rm -f "$tmp_old" "$tmp_new"
  return 0
}

git diff --cached --name-status |
grep -i '^[MA].*\.mdx\?$' |
while read status file; do
  if [ "$status" = "M" ]; then
    if ! content_changed "$status" "$file"; then
      continue
    fi
  fi

  filecontent=$(cat "$file")
  frontmatter=$(echo "$filecontent" | awk -v RS='---' 'NR==2{print}')
  if [ -z "$frontmatter" ]; then
    continue
  fi

  timestamp=$(date -u "+%Y-%m-%dT%H:%M:%SZ")

  if echo "$frontmatter" | grep -q '^modDatetime:'; then
    # Update existing modDatetime within the frontmatter block
    sed "/---.*/,/---.*/s/^modDatetime:.*$/modDatetime: ${timestamp}/" "$file" > tmp
  else
    if echo "$frontmatter" | grep -q '^pubDatetime:'; then
      # Insert modDatetime immediately after pubDatetime when present
      sed "/^pubDatetime:.*$/a modDatetime: ${timestamp}" "$file" > tmp
    else
      # Append modDatetime just before the closing frontmatter delimiter
      awk -v ts="$timestamp" 'BEGIN{delims=0; inserted=0} {
        if ($0 == "---") {
          delims++
          if (delims == 2 && !inserted) {
            print "modDatetime: " ts
            inserted=1
          }
        }
        print
      }' "$file" > tmp
    fi
  fi

  mv tmp "$file"
  git add "$file"
  echo "$file modDatetime updated"
done
